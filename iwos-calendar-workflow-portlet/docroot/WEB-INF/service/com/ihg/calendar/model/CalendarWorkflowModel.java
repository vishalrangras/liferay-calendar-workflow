/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package com.ihg.calendar.model;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscape;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.model.BaseModel;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.WorkflowedModel;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;

import java.io.Serializable;

import java.util.Date;
import java.util.Locale;
import java.util.Map;

/**
 * The base model interface for the CalendarWorkflow service. Represents a row in the &quot;calendar_workflow&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This interface and its corresponding implementation {@link com.ihg.calendar.model.impl.CalendarWorkflowModelImpl} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link com.ihg.calendar.model.impl.CalendarWorkflowImpl}.
 * </p>
 *
 * @author vishal.rangras
 * @see CalendarWorkflow
 * @see com.ihg.calendar.model.impl.CalendarWorkflowImpl
 * @see com.ihg.calendar.model.impl.CalendarWorkflowModelImpl
 * @generated
 */
public interface CalendarWorkflowModel extends BaseModel<CalendarWorkflow>,
	WorkflowedModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this interface directly. All methods that expect a calendar workflow model instance should use the {@link CalendarWorkflow} interface instead.
	 */

	/**
	 * Returns the primary key of this calendar workflow.
	 *
	 * @return the primary key of this calendar workflow
	 */
	public long getPrimaryKey();

	/**
	 * Sets the primary key of this calendar workflow.
	 *
	 * @param primaryKey the primary key of this calendar workflow
	 */
	public void setPrimaryKey(long primaryKey);

	/**
	 * Returns the calendar workflow ID of this calendar workflow.
	 *
	 * @return the calendar workflow ID of this calendar workflow
	 */
	public long getCalendarWorkflowId();

	/**
	 * Sets the calendar workflow ID of this calendar workflow.
	 *
	 * @param calendarWorkflowId the calendar workflow ID of this calendar workflow
	 */
	public void setCalendarWorkflowId(long calendarWorkflowId);

	/**
	 * Returns the group ID of this calendar workflow.
	 *
	 * @return the group ID of this calendar workflow
	 */
	public long getGroupId();

	/**
	 * Sets the group ID of this calendar workflow.
	 *
	 * @param groupId the group ID of this calendar workflow
	 */
	public void setGroupId(long groupId);

	/**
	 * Returns the calendar booking ID of this calendar workflow.
	 *
	 * @return the calendar booking ID of this calendar workflow
	 */
	public long getCalendarBookingId();

	/**
	 * Sets the calendar booking ID of this calendar workflow.
	 *
	 * @param calendarBookingId the calendar booking ID of this calendar workflow
	 */
	public void setCalendarBookingId(long calendarBookingId);

	/**
	 * Returns the title of this calendar workflow.
	 *
	 * @return the title of this calendar workflow
	 */
	public String getTitle();

	/**
	 * Returns the localized title of this calendar workflow in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param locale the locale of the language
	 * @return the localized title of this calendar workflow
	 */
	@AutoEscape
	public String getTitle(Locale locale);

	/**
	 * Returns the localized title of this calendar workflow in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param locale the local of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this calendar workflow. If <code>useDefault</code> is <code>false</code> and no localization exists for the requested language, an empty string will be returned.
	 */
	@AutoEscape
	public String getTitle(Locale locale, boolean useDefault);

	/**
	 * Returns the localized title of this calendar workflow in the language. Uses the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @return the localized title of this calendar workflow
	 */
	@AutoEscape
	public String getTitle(String languageId);

	/**
	 * Returns the localized title of this calendar workflow in the language, optionally using the default language if no localization exists for the requested language.
	 *
	 * @param languageId the ID of the language
	 * @param useDefault whether to use the default language if no localization exists for the requested language
	 * @return the localized title of this calendar workflow
	 */
	@AutoEscape
	public String getTitle(String languageId, boolean useDefault);

	@AutoEscape
	public String getTitleCurrentLanguageId();

	@AutoEscape
	public String getTitleCurrentValue();

	/**
	 * Returns a map of the locales and localized titles of this calendar workflow.
	 *
	 * @return the locales and localized titles of this calendar workflow
	 */
	public Map<Locale, String> getTitleMap();

	/**
	 * Sets the title of this calendar workflow.
	 *
	 * @param title the title of this calendar workflow
	 */
	public void setTitle(String title);

	/**
	 * Sets the localized title of this calendar workflow in the language.
	 *
	 * @param title the localized title of this calendar workflow
	 * @param locale the locale of the language
	 */
	public void setTitle(String title, Locale locale);

	/**
	 * Sets the localized title of this calendar workflow in the language, and sets the default locale.
	 *
	 * @param title the localized title of this calendar workflow
	 * @param locale the locale of the language
	 * @param defaultLocale the default locale
	 */
	public void setTitle(String title, Locale locale, Locale defaultLocale);

	public void setTitleCurrentLanguageId(String languageId);

	/**
	 * Sets the localized titles of this calendar workflow from the map of locales and localized titles.
	 *
	 * @param titleMap the locales and localized titles of this calendar workflow
	 */
	public void setTitleMap(Map<Locale, String> titleMap);

	/**
	 * Sets the localized titles of this calendar workflow from the map of locales and localized titles, and sets the default locale.
	 *
	 * @param titleMap the locales and localized titles of this calendar workflow
	 * @param defaultLocale the default locale
	 */
	public void setTitleMap(Map<Locale, String> titleMap, Locale defaultLocale);

	/**
	 * Returns the start time of this calendar workflow.
	 *
	 * @return the start time of this calendar workflow
	 */
	public long getStartTime();

	/**
	 * Sets the start time of this calendar workflow.
	 *
	 * @param startTime the start time of this calendar workflow
	 */
	public void setStartTime(long startTime);

	/**
	 * Returns the start date time of this calendar workflow.
	 *
	 * @return the start date time of this calendar workflow
	 */
	@AutoEscape
	public String getStartDateTime();

	/**
	 * Sets the start date time of this calendar workflow.
	 *
	 * @param startDateTime the start date time of this calendar workflow
	 */
	public void setStartDateTime(String startDateTime);

	/**
	 * Returns the status of this calendar workflow.
	 *
	 * @return the status of this calendar workflow
	 */
	@Override
	public int getStatus();

	/**
	 * Sets the status of this calendar workflow.
	 *
	 * @param status the status of this calendar workflow
	 */
	@Override
	public void setStatus(int status);

	/**
	 * Returns the status by user ID of this calendar workflow.
	 *
	 * @return the status by user ID of this calendar workflow
	 */
	@Override
	public long getStatusByUserId();

	/**
	 * Sets the status by user ID of this calendar workflow.
	 *
	 * @param statusByUserId the status by user ID of this calendar workflow
	 */
	@Override
	public void setStatusByUserId(long statusByUserId);

	/**
	 * Returns the status by user uuid of this calendar workflow.
	 *
	 * @return the status by user uuid of this calendar workflow
	 * @throws SystemException if a system exception occurred
	 */
	@Override
	public String getStatusByUserUuid() throws SystemException;

	/**
	 * Sets the status by user uuid of this calendar workflow.
	 *
	 * @param statusByUserUuid the status by user uuid of this calendar workflow
	 */
	@Override
	public void setStatusByUserUuid(String statusByUserUuid);

	/**
	 * Returns the status by user name of this calendar workflow.
	 *
	 * @return the status by user name of this calendar workflow
	 */
	@AutoEscape
	@Override
	public String getStatusByUserName();

	/**
	 * Sets the status by user name of this calendar workflow.
	 *
	 * @param statusByUserName the status by user name of this calendar workflow
	 */
	@Override
	public void setStatusByUserName(String statusByUserName);

	/**
	 * Returns the status date of this calendar workflow.
	 *
	 * @return the status date of this calendar workflow
	 */
	@Override
	public Date getStatusDate();

	/**
	 * Sets the status date of this calendar workflow.
	 *
	 * @param statusDate the status date of this calendar workflow
	 */
	@Override
	public void setStatusDate(Date statusDate);

	/**
	 * @deprecated As of 6.1.0, replaced by {@link #isApproved()}
	 */
	@Override
	public boolean getApproved();

	/**
	 * Returns <code>true</code> if this calendar workflow is approved.
	 *
	 * @return <code>true</code> if this calendar workflow is approved; <code>false</code> otherwise
	 */
	@Override
	public boolean isApproved();

	/**
	 * Returns <code>true</code> if this calendar workflow is denied.
	 *
	 * @return <code>true</code> if this calendar workflow is denied; <code>false</code> otherwise
	 */
	@Override
	public boolean isDenied();

	/**
	 * Returns <code>true</code> if this calendar workflow is a draft.
	 *
	 * @return <code>true</code> if this calendar workflow is a draft; <code>false</code> otherwise
	 */
	@Override
	public boolean isDraft();

	/**
	 * Returns <code>true</code> if this calendar workflow is expired.
	 *
	 * @return <code>true</code> if this calendar workflow is expired; <code>false</code> otherwise
	 */
	@Override
	public boolean isExpired();

	/**
	 * Returns <code>true</code> if this calendar workflow is inactive.
	 *
	 * @return <code>true</code> if this calendar workflow is inactive; <code>false</code> otherwise
	 */
	@Override
	public boolean isInactive();

	/**
	 * Returns <code>true</code> if this calendar workflow is incomplete.
	 *
	 * @return <code>true</code> if this calendar workflow is incomplete; <code>false</code> otherwise
	 */
	@Override
	public boolean isIncomplete();

	/**
	 * Returns <code>true</code> if this calendar workflow is pending.
	 *
	 * @return <code>true</code> if this calendar workflow is pending; <code>false</code> otherwise
	 */
	@Override
	public boolean isPending();

	/**
	 * Returns <code>true</code> if this calendar workflow is scheduled.
	 *
	 * @return <code>true</code> if this calendar workflow is scheduled; <code>false</code> otherwise
	 */
	@Override
	public boolean isScheduled();

	@Override
	public boolean isNew();

	@Override
	public void setNew(boolean n);

	@Override
	public boolean isCachedModel();

	@Override
	public void setCachedModel(boolean cachedModel);

	@Override
	public boolean isEscapedModel();

	@Override
	public Serializable getPrimaryKeyObj();

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj);

	@Override
	public ExpandoBridge getExpandoBridge();

	@Override
	public void setExpandoBridgeAttributes(BaseModel<?> baseModel);

	@Override
	public void setExpandoBridgeAttributes(ExpandoBridge expandoBridge);

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext);

	public String[] getAvailableLanguageIds();

	public String getDefaultLanguageId();

	public void prepareLocalizedFieldsForImport() throws LocaleException;

	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException;

	@Override
	public Object clone();

	@Override
	public int compareTo(CalendarWorkflow calendarWorkflow);

	@Override
	public int hashCode();

	@Override
	public CacheModel<CalendarWorkflow> toCacheModel();

	@Override
	public CalendarWorkflow toEscapedModel();

	@Override
	public CalendarWorkflow toUnescapedModel();

	@Override
	public String toString();

	@Override
	public String toXmlString();
}